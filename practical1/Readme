Sure! Here's a **short explanation for each line of code** in both the **server** and **client** programs, followed by a summary of **related concepts**.

---

## 🔧 Server: `factorial_server.py`

```python
from xmlrpc.server import SimpleXMLRPCServer  # Import built-in XML-RPC server class
```

* Imports the server class that supports RPC over HTTP.

```python
def calculate_factorial(n):  # Define function to calculate factorial
```

* Function exposed to clients.

```python
    if n < 0:
        return "Invalid input!"  # Factorial is not defined for negative numbers
```

```python
    result = 1
    for i in range(1, n + 1):  # Loop from 1 to n
        result *= i  # Multiply to get factorial
    return result  # Return result
```

```python
server = SimpleXMLRPCServer(("localhost", 8000))  # Create server on port 8000
print("Server is running on port 8000...")  # Print startup message
```

```python
server.register_function(calculate_factorial, "calculate_factorial")  
# Register the function so that client can call it by this name
```

```python
server.serve_forever()  # Start the server to listen for requests
```

---

## 👨‍💻 Client: `factorial_client.py`

```python
import xmlrpc.client  # Import the XML-RPC client module
```

```python
proxy = xmlrpc.client.ServerProxy("http://localhost:8000/")  
# Connect to server at the given address
```

```python
n = int(input("Enter an integer to compute factorial: "))  
# Take input from the user and convert to integer
```

```python
result = proxy.calculate_factorial(n)  
# Call the remote function on the server with the input value
```

```python
print(f"Factorial of {n} is: {result}")  
# Display the result received from the server
```

---

## 🔄 Related Concepts (Short Notes)

| Concept                         | Description                                                             |
| ------------------------------- | ----------------------------------------------------------------------- |
| **RPC (Remote Procedure Call)** | Allows a program to execute code on another computer/server remotely.   |
| **XML-RPC**                     | A protocol using XML over HTTP for making function calls remotely.      |
| **SimpleXMLRPCServer**          | Python’s built-in module to create a basic XML-RPC server.              |
| **ServerProxy**                 | Creates a client object to call functions hosted on the server.         |
| **Localhost & Port**            | Server runs on IP `127.0.0.1` (your own PC), port `8000`.               |
| **POST / HTTP/1.1 200**         | Standard HTTP message showing successful remote function execution.     |
| **Distributed Application**     | A program split across two or more systems communicating via a network. |

---

Would you like a diagram to visualize this server-client flow?
