Certainly! Here's a **full explanation** of your **hybrid Genetic Algorithm-Neural Network (GA-NN)** code with **related theoretical concepts** â€” tailored specifically for your topic:

---

## ðŸŽ¯ Title:

**"Optimization of Genetic Algorithm Parameters in Hybrid Genetic Algorithm-Neural Network Modelling: Application to Spray Drying of Coconut Milk"**

---

## ðŸ§  Goal:

To **model** the **spray drying process** of coconut milk using a **neural network (NN)**, and then **optimize the input parameters** (like temperature, pressure, flow rate) using a **genetic algorithm (GA)**, which evaluates solutions based on NN-predicted outputs (like yield or moisture content).

---

## ðŸ”§ Code Overview + Theory

---

### ðŸ”¹ 1. **Import Libraries**

```python
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from deap import base, creator, tools, algorithms
import random
```

#### âœ… Theory:

* **NumPy**: For handling numerical data.
* **TensorFlow/Keras**: For building and training the **neural network**.
* **DEAP (Distributed Evolutionary Algorithms in Python)**: For implementing the **genetic algorithm (GA)**.
* **Random**: To generate initial populations.

---

### ðŸ”¹ 2. **Create the Neural Network Model**

```python
def create_nn_model(input_dim):
    model = Sequential()
    model.add(Dense(64, input_dim=input_dim, activation='relu'))
    model.add(Dense(32, activation='relu'))
    model.add(Dense(1))  # Output layer
    model.compile(loss='mean_squared_error', optimizer='adam')
    return model
```

#### âœ… Theory:

* A **neural network (NN)** is used as a **black-box model** to simulate the relationship between **input process parameters** and **output quality** (like yield or moisture content).
* `relu` is used as an activation function because it's fast and works well in most regression problems.
* `adam` optimizer updates weights efficiently during training.

---

### ðŸ”¹ 3. **Prepare Training Data (Simulated Here)**

```python
X_train = np.random.rand(100, 3)  # Inputs: e.g., Temp, Pressure, Flow Rate
y_train = np.random.rand(100, 1)  # Output: e.g., Moisture Content
```

#### âœ… Theory:

* These would be replaced with **real experimental data** from coconut milk spray drying trials.
* Inputs could include:

  * Inlet air temperature
  * Feed rate
  * Atomization speed
* Output could be:

  * Product moisture content
  * Powder yield

---

### ðŸ”¹ 4. **Train the Neural Network**

```python
nn_model = create_nn_model(X_train.shape[1])
nn_model.fit(X_train, y_train, epochs=50, batch_size=10)
```

#### âœ… Theory:

* The neural network **learns the process behavior** from data.
* After training, it can **predict the output quality** for any new set of input parameters.

---

### ðŸ”¹ 5. **Define the Genetic Algorithm Problem**

```python
creator.create("FitnessMax", base.Fitness, weights=(1.0,))
creator.create("Individual", list, fitness=creator.FitnessMax)
```

#### âœ… Theory:

* GA tries to **maximize** the output (e.g., yield or minimize moisture).
* `Individual`: A potential solution, i.e., a combination of input parameters.
* `Fitness`: Represents how good a solution is.

---

### ðŸ”¹ 6. **Define the Fitness Function (Using NN)**

```python
def evaluate(individual):
    input_data = np.array(individual).reshape(1, -1)
    prediction = nn_model.predict(input_data)
    return prediction[0][0],  # Return as a tuple
```

#### âœ… Theory:

* The **fitness** of each individual (set of process parameters) is **evaluated using the neural network model**.
* This is the core of the **hybrid approach**:

  * NN = Evaluator (cheap to compute)
  * GA = Optimizer (explores input space)

---

### ðŸ”¹ 7. **Register Genetic Operators**

```python
toolbox = base.Toolbox()
toolbox.register("attr_float", random.uniform, 0, 1)
toolbox.register("individual", tools.initCycle, creator.Individual, (toolbox.attr_float,) * 3, n=1)
toolbox.register("population", tools.initRepeat, list, toolbox.individual)
toolbox.register("mate", tools.cxBlend, alpha=0.5)
toolbox.register("mutate", tools.mutGaussian, mu=0, sigma=0.1, indpb=0.2)
toolbox.register("select", tools.selTournament, tournsize=3)
toolbox.register("evaluate", evaluate)
```

#### âœ… Theory:

* **Initialization**: Random float values for 3 inputs (assumed to be in normalized range \[0, 1]).
* **Crossover (Blend)**: Mixes parents to generate children.
* **Mutation (Gaussian)**: Adds randomness to encourage exploration.
* **Selection (Tournament)**: Chooses best candidates for the next generation.
* **Evaluation**: Done by the trained NN model.

---

### ðŸ”¹ 8. **Run the Genetic Algorithm**

```python
population = toolbox.population(n=100)
result = algorithms.eaSimple(population, toolbox, cxpb=0.7, mutpb=0.2, ngen=50, verbose=True)
```

#### âœ… Theory:

* `n=100`: Population size
* `cxpb=0.7`: 70% crossover chance
* `mutpb=0.2`: 20% mutation chance
* `ngen=50`: 50 generations

> GA tries to find the best input values (e.g., spray drying conditions) that maximize the predicted output.

---

### ðŸ”¹ 9. **Get the Best Parameters**

```python
best_individual = tools.selBest(population, 1)[0]
print(f"Best individual: {best_individual}")
```

#### âœ… Theory:

* The best individual from the final population is considered the **optimized process setting**.

---

## ðŸ“˜ Theoretical Foundation

### ðŸ”¸ Neural Network (NN)

* Learns **non-linear relationships** between inputs (e.g., temp, pressure) and outputs (e.g., yield).
* Acts as a **surrogate model** in this hybrid framework.

### ðŸ”¸ Genetic Algorithm (GA)

* **Inspired by evolution**: selection, crossover, mutation.
* Searches for the **best solution in complex spaces**, even when gradient-based methods fail.

### ðŸ”¸ Hybrid GA-NN System

* **Why hybridize?**

  * Spray drying is complex, hard to model explicitly.
  * NN learns from data.
  * GA finds optimal settings without gradient or formulae.

---

## ðŸ§ª Application to Spray Drying of Coconut Milk

* Spray drying involves converting liquid coconut milk into powder.
* Important inputs:

  * **Inlet air temperature**
  * **Atomization speed**
  * **Feed flow rate**
* Important outputs:

  * **Product yield**
  * **Moisture content**
  * **Solubility**

By training a **neural network** on experimental data, and then using **GA to find optimal process conditions**, you improve product quality and efficiency without repeated lab experiments.

---

## âœ… Summary

Your code:

* **Implements a hybrid GA-NN approach**
* **Models spray drying** with a neural network
* **Optimizes process inputs** using GA
* Is **valid** for the research question and ready for real data

---

Would you like this explanation in PDF or slide format for presentation/report purposes?
